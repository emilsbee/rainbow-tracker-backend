generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivityType {
  activityid   String       @id @db.VarChar(50)
  categoryid   String       @db.VarChar(50)
  userid       String       @db.VarChar(50)
  long         String       @db.VarChar(100)
  short        String       @db.VarChar(2)
  archived     Boolean
  categoryType CategoryType @relation(fields: [categoryid], references: [categoryid], onDelete: NoAction, onUpdate: NoAction, map: "fk_category")
  appUser      AppUser      @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
  categories   Category[]

  @@map("activity_type")
}

model AppUser {
  userid        String         @id @db.VarChar(50)
  email         String         @unique @db.VarChar(320)
  password      String         @db.VarChar(250)
  salt          String         @db.VarChar(50)
  activityTypes ActivityType[]
  categories    Category[]
  categoryTypes CategoryType[]
  notes         Note[]
  sessions      Session[]
  weeks         Week[]

  @@map("app_user")
}

model Category {
  weekid           String        @db.VarChar(50)
  weekDay          Int
  categoryPosition Int
  userid           String        @db.VarChar(50)
  categoryid       String?       @db.VarChar(50)
  activityid       String?       @db.VarChar(50)
  weekDayDate      DateTime      @db.Date
  activityType     ActivityType? @relation(fields: [activityid], references: [activityid], onDelete: NoAction, onUpdate: NoAction, map: "fk_activity")
  categoryType     CategoryType? @relation(fields: [categoryid], references: [categoryid], onDelete: NoAction, onUpdate: NoAction, map: "fk_category")
  appUser          AppUser       @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
  week             Week          @relation(fields: [weekid], references: [weekid], onDelete: NoAction, onUpdate: NoAction, map: "fk_week")

  @@id([weekid, weekDay, categoryPosition])
  @@map("category")
}

model CategoryType {
  categoryid    String         @id @db.VarChar(50)
  userid        String         @db.VarChar(50)
  color         String         @db.VarChar(50)
  name          String         @db.VarChar(50)
  archived      Boolean
  appUser       AppUser        @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
  activityTypes ActivityType[]
  categories    Category[]

  @@map("category_type")
}

model Note {
  weekid       String   @db.VarChar(50)
  weekDay      Int
  notePosition Int
  stackid      String   @db.VarChar(50)
  userid       String   @db.VarChar(50)
  note         String?  @db.VarChar
  weekDayDate  DateTime @db.Date
  app_user     AppUser  @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
  week         Week     @relation(fields: [weekid], references: [weekid], onDelete: NoAction, onUpdate: NoAction, map: "fk_week")

  @@id([weekid, weekDay, notePosition])
  @@map("note")
}

model Session {
  userid       String   @db.VarChar(50)
  refreshToken String   @unique @db.VarChar(50)
  expiresAt    DateTime @db.Timestamp(6)
  appUser      AppUser  @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([userid, refreshToken])
  @@map("session")
}

model Week {
  weekid     String     @id @db.VarChar(50)
  userid     String     @db.VarChar(50)
  weekNr     Int
  weekYear   Int
  app_user   AppUser    @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
  categories Category[]
  notes      Note[]

  @@unique([userid, weekNr, weekYear])
  @@map("week")
}
