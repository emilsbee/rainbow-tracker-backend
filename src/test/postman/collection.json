{
	"info": {
		"_postman_id": "3693b0e5-8e34-4b47-b814-787b07b5b327",
		"name": "Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "Login success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login success status 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Login success response body correct\", function () {",
											"    pm.expect(jsonData).to.have.length(1);",
											"});",
											"",
											"pm.test(\"Cookie rainbow:session is present\", () => {",
											"  pm.expect(pm.cookies.has('rainbow:session')).to.be.true;",
											"});",
											"",
											"// Sets the userid environment variable ",
											"if (jsonData.length > 0 && jsonData[0].userid) {",
											"    pm.environment.set(\"userid\", jsonData[0].userid)   ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{valid_email}}\",\n    \"password\": \"{{valid_pass}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login failed with existing email but wrong password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login failed with existing email but wrong password status 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Login failed with existing email but wrong password response body correct\", function () {",
											"    pm.expect(pm.response.text()).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"emils@gmail.com\",\n    \"password\": \"wrong\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login failed with wrong email and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login failed with wrong email and password status 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Login failed with wrong email and password response body correct\", function () {",
											"    pm.expect(pm.response.text()).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"wrong@wrong.wrong\",\n    \"password\": \"wrong\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "Logout with being logged in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout with being logged in status 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Logout with being logged in cookie rainbow:session is removed\", () => {",
											"  pm.expect(pm.cookies.has('rainbow:session')).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/user/{{userid}}/auth/logout",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"{{userid}}",
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout without being logged in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout without being logged in status 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Logout without being logged in cookie rainbow:session is removed\", () => {",
											"  pm.expect(pm.cookies.has('rainbow:session')).to.be.false;",
											"});",
											"",
											"pm.test(\"Logout without being logged in response body correct\", function () {",
											"    pm.expect(pm.response.text()).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/user/{{userid}}/auth/logout",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"{{userid}}",
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Category type",
					"item": [
						{
							"name": "Create category type",
							"item": [
								{
									"name": "Create category type success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Make sure to login before test",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"url\") + \"/auth/login\",",
													"    header: {",
													"        'content-type': 'application/json',",
													"    },",
													"    method: 'POST',",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({ email: pm.environment.get(\"valid_email\"), password: pm.environment.get(\"valid_pass\") })",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create category type success status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"pm.test(\"Create category type success response body correct\", function () {",
													"    pm.expect(jsonData).to.have.length(1);",
													"    pm.expect(jsonData[0].categoryid).to.be.a(\"string\")",
													"    pm.expect(jsonData[0].color).to.eql(pm.environment.get(\"category_color\"))",
													"    pm.expect(jsonData[0].name).to.eql(pm.environment.get(\"category_name\"))",
													"});",
													"",
													"// Sets the categoryid environment variable ",
													"if (jsonData.length > 0 && jsonData[0].categoryid) {",
													"    pm.environment.set(\"categoryid\", jsonData[0].categoryid)   ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"color\": \"{{category_color}}\",\n    \"name\": \"{{category_name}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/{{userid}}/category-types",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"{{userid}}",
												"category-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create category type failed with missing property",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create category failed with missing property status 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Create category failed with missing property response body correct\", function () {",
													"    pm.expect(pm.response.text()).to.be.a(\"string\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{category_name}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/{{userid}}/category-types",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"{{userid}}",
												"category-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create category type failed without being logged in",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Logout before test {{url}}/user/{{userid}}/auth/logout",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"url\") + \"/user/\" + pm.environment.get(\"userid\") + \"/auth/logout\",",
													"    method: 'GET'",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create category failed without being logged in status 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Create category failed without being logged in response body correct\", function () {",
													"    pm.expect(pm.response.text()).to.be.a(\"string\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"color\": \"{{category_color}}\",\n    \"name\": \"{{category_name}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/{{userid}}/category-types",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"{{userid}}",
												"category-types"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update category type",
							"item": [
								{
									"name": "Update category type success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Make sure to login before test",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"url\") + \"/auth/login\",",
													"    header: {",
													"        'content-type': 'application/json',",
													"    },",
													"    method: 'POST',",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({ email: pm.environment.get(\"valid_email\"), password: pm.environment.get(\"valid_pass\") })",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update category type success status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"pm.test(\"Update category type success response body correct\", function () {",
													"    pm.expect(jsonData).to.have.length(1);",
													"    pm.expect(jsonData[0].categoryid).to.be.a(\"string\")",
													"    pm.expect(jsonData[0].color).to.eql(pm.environment.get(\"category_update_color\"))",
													"    pm.expect(jsonData[0].name).to.eql(pm.environment.get(\"category_update_name\"))",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"color\": \"{{category_update_color}}\",\n    \"name\": \"{{category_update_name}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/{{userid}}/category-type/{{categoryid}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"{{userid}}",
												"category-type",
												"{{categoryid}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	]
}